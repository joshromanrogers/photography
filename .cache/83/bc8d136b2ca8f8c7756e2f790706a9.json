{"id":"node_modules/simple-loop/index.js","dependencies":[{"name":"/Users/romanrogers/Desktop/Projects/photography/package.json","includedInParent":true,"mtime":1554877001000},{"name":"/Users/romanrogers/Desktop/Projects/photography/node_modules/simple-loop/package.json","includedInParent":true,"mtime":1554877001000},{"name":"assert","loc":{"line":10,"column":21},"parent":"/Users/romanrogers/Desktop/Projects/photography/node_modules/simple-loop/index.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/assert/assert.js"}],"generated":{"js":"/**\n* @license simple-loop https://github.com/flams/simple-loop\n*\n* The MIT License (MIT)\n*\n* Copyright (c) 2014 Olivier Scherrer <pode.fr@gmail.com>\n*/\n\"use strict\";\n\nvar assert = require(\"assert\");\n\n/**\n * Small abstraction for looping over objects and arrays\n * Warning: it's not meant to be used with nodeList\n * To use with nodeList, convert to array first\n * @param {Array/Object} iterated the array or object to loop through\n * @param {Function} callback the function to execute for each iteration\n * @param {Object} scope the scope in which to execute the callback\n */\nmodule.exports = function loop(iterated, callback, scope) {\n  assert(typeof iterated == \"object\", \"simple-loop: iterated must be an array/object\");\n  assert(typeof callback == \"function\", \"simple-loop: callback must be a function\");\n\n  if (Array.isArray(iterated)) {\n      iterated.forEach(callback, scope);\n  } else {\n      for (var i in iterated) {\n          if (iterated.hasOwnProperty(i)) {\n              callback.call(scope, iterated[i], i, iterated);\n          }\n      }\n  }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/simple-loop/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/simple-loop/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"node_modules/simple-loop/index.js":"/**\n* @license simple-loop https://github.com/flams/simple-loop\n*\n* The MIT License (MIT)\n*\n* Copyright (c) 2014 Olivier Scherrer <pode.fr@gmail.com>\n*/\n\"use strict\";\n\nvar assert = require(\"assert\");\n\n/**\n * Small abstraction for looping over objects and arrays\n * Warning: it's not meant to be used with nodeList\n * To use with nodeList, convert to array first\n * @param {Array/Object} iterated the array or object to loop through\n * @param {Function} callback the function to execute for each iteration\n * @param {Object} scope the scope in which to execute the callback\n */\nmodule.exports = function loop(iterated, callback, scope) {\n  assert(typeof iterated == \"object\", \"simple-loop: iterated must be an array/object\");\n  assert(typeof callback == \"function\", \"simple-loop: callback must be a function\");\n\n  if (Array.isArray(iterated)) {\n      iterated.forEach(callback, scope);\n  } else {\n      for (var i in iterated) {\n          if (iterated.hasOwnProperty(i)) {\n              callback.call(scope, iterated[i], i, iterated);\n          }\n      }\n  }\n};\n"},"lineCount":34}},"error":null,"hash":"809c498e09f9bb7d5d7d528129f8889f","cacheData":{"env":{}}}